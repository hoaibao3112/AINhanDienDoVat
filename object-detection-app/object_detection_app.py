#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
·ª®ng d·ª•ng AI nh·∫≠n di·ªán ƒë·ªì v·∫≠t s·ª≠ d·ª•ng YOLOv8
T√°c gi·∫£: AI Assistant
Ng√†y: 28/09/2025
"""

import cv2
import numpy as np
from ultralytics import YOLO
import pandas as pd
from datetime import datetime
import os
from collections import defaultdict, Counter
import time
from PIL import Image, ImageDraw, ImageFont
import sys

class ObjectDetectionApp:
    def __init__(self):
        """Kh·ªüi t·∫°o ·ª©ng d·ª•ng"""
        self.model = None
        self.cap = None
        self.is_running = False
        self.log_data = []
        self.object_counts = defaultdict(int)
        self.detection_history = defaultdict(list)  # L·ªãch s·ª≠ nh·∫≠n di·ªán ƒë·ªÉ l·ªçc nhi·ªÖu
        self.max_history = 15  # TƒÉng l√™n 15 frame ƒë·ªÉ h·ªçc t·ªët h∆°n
        self.object_stability = defaultdict(int)  # ƒê·∫øm ƒë·ªô ·ªïn ƒë·ªãnh c·ªßa t·ª´ng ƒë·ªëi t∆∞·ª£ng
        self.false_positive_penalty = defaultdict(float)  # Ph·∫°t c√°c detection hay sai
        self.learning_rate = 0.1  # T·ªëc ƒë·ªô h·ªçc
        self.smart_mode = "normal"  # normal, strict, sensitive
        
        # T·ª´ ƒëi·ªÉn d·ªãch t√™n ƒë·ªëi t∆∞·ª£ng sang ti·∫øng Vi·ªát (t√™n ƒë·∫ßy ƒë·ªß cho CSV)
        self.vietnamese_names = {
            'person': 'Nguoi',
            'bicycle': 'Xe dap', 
            'car': 'O to',
            'motorcycle': 'Xe may',
            'airplane': 'May bay',
            'bus': 'Xe buyt',
            'train': 'Tau hoa',
            'truck': 'Xe tai',
            'boat': 'Thuyen',
            'traffic light': 'Den giao thong',
            'stop sign': 'Bien bao dung',
            'bench': 'Bang ghe',
            'bird': 'Chim',
            'cat': 'Meo',
            'dog': 'Cho',
            'horse': 'Ngua',
            'sheep': 'Cuu', 
            'cow': 'Bo',
            'elephant': 'Voi',
            'bear': 'Gau',
            'zebra': 'Ngua van',
            'giraffe': 'Huong cao',
            'backpack': 'Ba lo',
            'umbrella': 'O',
            'handbag': 'Tui xach',
            'tie': 'Ca vat',
            'suitcase': 'Vali',
            'frisbee': 'Dia bay',
            'skis': 'Van truot tuyet',
            'snowboard': 'Van truot tuyet',
            'sports ball': 'Bong the thao',
            'kite': 'Dieu',
            'baseball bat': 'Gay bong chay',
            'baseball glove': 'Gang tay bong chay',
            'skateboard': 'Van truot',
            'surfboard': 'Van luot song',
            'tennis racket': 'Vot tennis',
            'bottle': 'Chai',
            'wine glass': 'Ly ruou vang',
            'cup': 'Coc',
            'fork': 'Nia',
            'knife': 'Dao',
            'spoon': 'Muong',
            'bowl': 'Bat',
            'banana': 'Chuoi',
            'apple': 'Tao',
            'sandwich': 'Banh sandwich',
            'orange': 'Cam',
            'broccoli': 'Sup lo xanh',
            'carrot': 'Ca rot',
            'hot dog': 'Banh mi kep xuc xich',
            'pizza': 'Pizza',
            'donut': 'Banh donut',
            'cake': 'Banh ngot',
            'chair': 'Ghe',
            'couch': 'Ghe sofa',
            'potted plant': 'Chau cay',
            'bed': 'Giuong',
            'dining table': 'Ban an',
            'toilet': 'Nha ve sinh',
            'tv': 'TV',
            'laptop': 'Laptop',
            'mouse': 'Chuot may tinh',
            'remote': 'Dieu khien tu xa',
            'keyboard': 'Ban phim',
            'cell phone': 'Dien thoai',
            'microwave': 'Lo vi song',
            'oven': 'Lo nuong',
            'toaster': 'May nuong banh mi',
            'sink': 'Bon rua',
            'refrigerator': 'Tu lanh',
            'book': 'Sach',
            'clock': 'Dong ho',
            'vase': 'Binh hoa',
            'scissors': 'Keo',
            'teddy bear': 'Gau bong',
            'hair drier': 'May say toc',
            'toothbrush': 'Ban chai danh rang'
        }
        
        # T·ª´ ƒëi·ªÉn t√™n ng·∫Øn g·ªçn cho hi·ªÉn th·ªã (tr√°nh l·ªói font)
        self.display_names = {
            'person': 'Nguoi',
            'bicycle': 'Xe dap', 
            'car': 'Oto',
            'motorcycle': 'Xe may',
            'airplane': 'May bay',
            'bus': 'Xe buyt',
            'train': 'Tau hoa',
            'truck': 'Xe tai',
            'boat': 'Thuyen',
            'traffic light': 'Den giao thong',
            'stop sign': 'Bien bao',
            'bench': 'Bang ghe',
            'bird': 'Chim',
            'cat': 'Meo',
            'dog': 'Cho',
            'horse': 'Ngua',
            'sheep': 'Cuu', 
            'cow': 'Bo',
            'elephant': 'Voi',
            'bear': 'Gau',
            'zebra': 'Ngua van',
            'giraffe': 'Cao co',
            'backpack': 'Balo',
            'umbrella': 'O',
            'handbag': 'Tui xach',
            'tie': 'Ca vat',
            'suitcase': 'Vali',
            'frisbee': 'Dia bay',
            'skis': 'Van truot',
            'snowboard': 'Van truot',
            'sports ball': 'Bong',
            'kite': 'Dieu',
            'baseball bat': 'Gay bong',
            'baseball glove': 'Gang tay',
            'skateboard': 'Van truot',
            'surfboard': 'Van luot',
            'tennis racket': 'Vot',
            'bottle': 'Chai',
            'wine glass': 'Ly ruou',
            'cup': 'Coc',
            'fork': 'Nia',
            'knife': 'Dao',
            'spoon': 'Muong',
            'bowl': 'Bat',
            'banana': 'Chuoi',
            'apple': 'Tao',
            'sandwich': 'Sandwich',
            'orange': 'Cam',
            'broccoli': 'Sup lo',
            'carrot': 'Ca rot',
            'hot dog': 'Hot dog',
            'pizza': 'Pizza',
            'donut': 'Donut',
            'cake': 'Banh',
            'chair': 'Ghe',
            'couch': 'Sofa',
            'potted plant': 'Cay',
            'bed': 'Giuong',
            'dining table': 'Ban an',
            'toilet': 'WC',
            'tv': 'TV',
            'laptop': 'Laptop',
            'mouse': 'Chuot',
            'remote': 'Remote',
            'keyboard': 'Ban phim',
            'cell phone': 'Dien thoai',
            'microwave': 'Lo vi song',
            'oven': 'Lo nuong',
            'toaster': 'May nuong',
            'sink': 'Bon rua',
            'refrigerator': 'Tu lanh',
            'book': 'Sach',
            'clock': 'Dong ho',
            'vase': 'Binh hoa',
            'scissors': 'Keo',
            'teddy bear': 'Gau bong',
            'hair drier': 'May say',
            'toothbrush': 'Ban chai'
        }
        
        # C√°c ƒë·ªëi t∆∞·ª£ng quan t√¢m t·ª´ COCO dataset
        self.target_classes = set(self.vietnamese_names.keys())
        
        print("üöÄ ƒêang kh·ªüi t·∫°o Object Detection App...")
        
        # Context rules - ƒë·ªëi t∆∞·ª£ng th∆∞·ªùng xu·∫•t hi·ªán c√πng nhau
        self.context_rules = {
            'laptop': ['mouse', 'keyboard', 'cell phone'],  # Laptop th∆∞·ªùng ƒëi v·ªõi chu·ªôt, b√†n ph√≠m
            'dining table': ['chair', 'cup', 'bowl', 'fork', 'knife', 'spoon'],  # B√†n ƒÉn v·ªõi ƒë·ªì ƒÉn
            'person': ['cell phone', 'handbag', 'book'],  # Ng∆∞·ªùi th∆∞·ªùng c√≥ ƒëi·ªán tho·∫°i, t√∫i
            'kitchen': ['refrigerator', 'microwave', 'sink', 'bottle'],
            'office': ['laptop', 'keyboard', 'mouse', 'book', 'scissors']
        }
        
        # Confidence thresholds ri√™ng cho t·ª´ng lo·∫°i ƒë·ªëi t∆∞·ª£ng
        self.confidence_thresholds = {
            # ƒê·ªëi t∆∞·ª£ng d·ªÖ nh·∫ßm l·∫´n - y√™u c·∫ßu confidence cao h∆°n
            'knife': 0.85,
            'fork': 0.85,
            'spoon': 0.85,
            'hot dog': 0.85,
            'sandwich': 0.80,
            'donut': 0.80,
            'cake': 0.80,
            'pizza': 0.80,
            
            # ƒê·ªëi t∆∞·ª£ng r√µ r√†ng - confidence trung b√¨nh
            'person': 0.60,
            'car': 0.65,
            'bicycle': 0.65,
            'motorcycle': 0.65,
            
            # ƒê·ªëi t∆∞·ª£ng tech - confidence trung b√¨nh cao
            'laptop': 0.70,
            'cell phone': 0.75,
            'tv': 0.70,
            'mouse': 0.75,
            'keyboard': 0.75,
            'remote': 0.75,
            
            # ƒê·ªëi t∆∞·ª£ng vƒÉn ph√≤ng ph·∫©m
            'book': 0.70,
            'scissors': 0.80,
            
            # M·∫∑c ƒë·ªãnh cho c√°c ƒë·ªëi t∆∞·ª£ng kh√°c
            'default': 0.70
        }
    
    def get_confidence_threshold(self, class_name):
        """L·∫•y confidence threshold ph√π h·ª£p cho t·ª´ng lo·∫°i ƒë·ªëi t∆∞·ª£ng"""
        return self.confidence_thresholds.get(class_name, self.confidence_thresholds['default'])
    
    def is_reasonable_size(self, class_name, bbox_width, bbox_height, frame_width, frame_height):
        """Ki·ªÉm tra k√≠ch th∆∞·ªõc bounding box c√≥ h·ª£p l√Ω kh√¥ng"""
        bbox_area_ratio = (bbox_width * bbox_height) / (frame_width * frame_height)
        
        # ƒê·ªãnh nghƒ©a k√≠ch th∆∞·ªõc h·ª£p l√Ω cho t·ª´ng lo·∫°i ƒë·ªëi t∆∞·ª£ng
        size_ranges = {
            # ƒê·ªëi t∆∞·ª£ng nh·ªè (2-15% m√†n h√¨nh)
            'cell phone': (0.02, 0.15),
            'mouse': (0.01, 0.08),
            'remote': (0.02, 0.12),
            'book': (0.03, 0.20),
            'scissors': (0.01, 0.10),
            'knife': (0.005, 0.08),
            'fork': (0.005, 0.05),
            'spoon': (0.005, 0.05),
            'cup': (0.02, 0.15),
            'bottle': (0.02, 0.20),
            
            # ƒê·ªëi t∆∞·ª£ng trung b√¨nh (10-40% m√†n h√¨nh)
            'laptop': (0.10, 0.40),
            'keyboard': (0.08, 0.30),
            'tv': (0.15, 0.60),
            'chair': (0.15, 0.50),
            
            # ƒê·ªëi t∆∞·ª£ng l·ªõn (20-80% m√†n h√¨nh)
            'person': (0.20, 0.80),
            'couch': (0.25, 0.70),
            'bed': (0.30, 0.80),
            'car': (0.25, 0.85),
            
            # M·∫∑c ƒë·ªãnh
            'default': (0.01, 0.60)
        }
        
        min_size, max_size = size_ranges.get(class_name, size_ranges['default'])
        return min_size <= bbox_area_ratio <= max_size
    
    def is_reasonable_position(self, class_name, x1, y1, x2, y2, frame_width, frame_height):
        """Ki·ªÉm tra v·ªã tr√≠ ƒë·ªëi t∆∞·ª£ng c√≥ h·ª£p l√Ω kh√¥ng"""
        center_x = (x1 + x2) / 2
        center_y = (y1 + y2) / 2
        
        # M·ªôt s·ªë ƒë·ªëi t∆∞·ª£ng th∆∞·ªùng xu·∫•t hi·ªán ·ªü v·ªã tr√≠ ƒë·∫∑c bi·ªát
        position_rules = {
            'laptop': lambda cx, cy: cy > frame_height * 0.3,  # Laptop th∆∞·ªùng ·ªü ph·∫ßn d∆∞·ªõi
            'tv': lambda cx, cy: cy < frame_height * 0.7,      # TV th∆∞·ªùng ·ªü ph·∫ßn tr√™n/gi·ªØa
            'ceiling fan': lambda cx, cy: cy < frame_height * 0.3,  # Qu·∫°t tr·∫ßn ·ªü tr√™n
            'chair': lambda cx, cy: cy > frame_height * 0.2,   # Gh·∫ø th∆∞·ªùng ·ªü ph·∫ßn d∆∞·ªõi
        }
        
        if class_name in position_rules:
            return position_rules[class_name](center_x, center_y)
        
        return True  # Kh√¥ng c√≥ rule ƒë·∫∑c bi·ªát th√¨ ch·∫•p nh·∫≠n
    
    def get_context_boost(self, class_name, current_detections):
        """TƒÉng ƒë·ªô tin c·∫≠y d·ª±a tr√™n ng·ªØ c·∫£nh (ƒë·ªëi t∆∞·ª£ng kh√°c trong khung h√¨nh)"""
        boost = 0.0
        
        for main_object, related_objects in self.context_rules.items():
            if class_name in related_objects:
                # N·∫øu ƒë·ªëi t∆∞·ª£ng ch√≠nh xu·∫•t hi·ªán, tƒÉng ƒë·ªô tin c·∫≠y cho related objects
                if main_object in current_detections:
                    boost += 0.05
                    
        # TƒÉng ƒë·ªô tin c·∫≠y n·∫øu c√≥ nhi·ªÅu ƒë·ªëi t∆∞·ª£ng c√πng context
        context_count = 0
        for main_object, related_objects in self.context_rules.items():
            if class_name == main_object or class_name in related_objects:
                context_count += sum(1 for obj in related_objects if obj in current_detections)
                
        if context_count >= 2:
            boost += 0.03 * context_count
            
        return min(boost, 0.15)  # Gi·ªõi h·∫°n boost t·ªëi ƒëa 15%
    
    def is_stable_detection(self, class_name, confidence, bbox_area):
        """Ki·ªÉm tra xem nh·∫≠n di·ªán c√≥ ·ªïn ƒë·ªãnh kh√¥ng (l·ªçc nhi·ªÖu th√¥ng minh)"""
        # Th√™m v√†o l·ªãch s·ª≠ v·ªõi th√¥ng tin b·ªï sung
        detection_info = {
            'confidence': confidence,
            'area': bbox_area,
            'timestamp': time.time()
        }
        
        self.detection_history[class_name].append(detection_info)
        
        # Gi·ªØ ch·ªâ max_history frame g·∫ßn nh·∫•t
        if len(self.detection_history[class_name]) > self.max_history:
            self.detection_history[class_name].pop(0)
        
        # C·∫ßn √≠t nh·∫•t 4 frame ƒë·ªÉ ƒë√°nh gi√°
        if len(self.detection_history[class_name]) < 4:
            return False
        
        recent_detections = self.detection_history[class_name][-4:]
        threshold = self.get_confidence_threshold(class_name)
        
        # √Åp d·ª•ng ph·∫°t n·∫øu ƒë·ªëi t∆∞·ª£ng n√†y hay sai
        adjusted_threshold = threshold + self.false_positive_penalty.get(class_name, 0.0)
        
        # Ki·ªÉm tra ƒë·ªô ·ªïn ƒë·ªãnh v·ªÅ confidence
        confidence_stable = sum(1 for d in recent_detections if d['confidence'] > adjusted_threshold) >= 3
        
        # Ki·ªÉm tra ƒë·ªô ·ªïn ƒë·ªãnh v·ªÅ k√≠ch th∆∞·ªõc bounding box
        areas = [d['area'] for d in recent_detections]
        area_variance = np.var(areas) if len(areas) > 1 else 0
        area_stable = area_variance < (bbox_area * 0.3)  # Bi·∫øn thi√™n k√≠ch th∆∞·ªõc < 30%
        
        # Ki·ªÉm tra t·∫ßn su·∫•t xu·∫•t hi·ªán
        time_gaps = []
        for i in range(1, len(recent_detections)):
            gap = recent_detections[i]['timestamp'] - recent_detections[i-1]['timestamp']
            time_gaps.append(gap)
        
        # ƒê·ªëi t∆∞·ª£ng th·∫≠t th∆∞·ªùng xu·∫•t hi·ªán li√™n t·ª•c
        frequency_stable = len(time_gaps) == 0 or max(time_gaps) < 2.0  # Kh√¥ng b·ªã gi√°n ƒëo·∫°n > 2s
        
        is_stable = confidence_stable and area_stable and frequency_stable
        
        # C·∫≠p nh·∫≠t ƒë·ªô ·ªïn ƒë·ªãnh
        if is_stable:
            self.object_stability[class_name] += 1
            # Gi·∫£m penalty n·∫øu ·ªïn ƒë·ªãnh
            if self.false_positive_penalty.get(class_name, 0) > 0:
                self.false_positive_penalty[class_name] *= 0.9
        else:
            # TƒÉng penalty n·∫øu kh√¥ng ·ªïn ƒë·ªãnh (c√≥ th·ªÉ l√† false positive)
            self.false_positive_penalty[class_name] = self.false_positive_penalty.get(class_name, 0) + 0.05
            
        return is_stable
    
    def get_vietnamese_names(self, english_name):
        """L·∫•y t√™n ti·∫øng Vi·ªát cho hi·ªÉn th·ªã v√† l∆∞u CSV"""
        vietnamese_name = self.vietnamese_names.get(english_name, english_name)  # Cho CSV
        display_name = self.display_names.get(english_name, english_name)        # Cho hi·ªÉn th·ªã
        return vietnamese_name, display_name
        
    def load_model(self):
        """T·∫£i YOLOv8 model"""
        try:
            print("üì¶ ƒêang t·∫£i YOLOv8 model...")
            self.model = YOLO('yolov8n.pt')  # YOLOv8 nano - nhanh v√† nh·∫π
            print("‚úÖ Model ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng!")
            return True
        except Exception as e:
            print(f"‚ùå L·ªói khi t·∫£i model: {e}")
            return False
    
    def init_camera(self, camera_id=0):
        """Kh·ªüi t·∫°o camera"""
        try:
            print(f"üìπ ƒêang kh·ªüi t·∫°o camera {camera_id}...")
            self.cap = cv2.VideoCapture(camera_id)
            
            if not self.cap.isOpened():
                raise Exception("Kh√¥ng th·ªÉ m·ªü camera")
            
            # Thi·∫øt l·∫≠p ƒë·ªô ph√¢n gi·∫£i
            self.cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
            self.cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
            
            print("‚úÖ Camera ƒë√£ s·∫µn s√†ng!")
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói camera: {e}")
            return False
    
    def draw_predictions(self, frame, results, all_detections=None):
        """V·∫Ω bounding box v√† label l√™n frame"""
        current_objects = Counter()
        if all_detections is None:
            all_detections = []
        
        for result in results:
            boxes = result.boxes
            if boxes is not None:
                for box in boxes:
                    # L·∫•y t·ªça ƒë·ªô v√† confidence
                    x1, y1, x2, y2 = map(int, box.xyxy[0])
                    confidence = box.conf[0]
                    class_id = int(box.cls[0])
                    
                    # L·∫•y t√™n class
                    class_name = self.model.names[class_id]
                    
                    # Ch·ªâ x·ª≠ l√Ω c√°c ƒë·ªëi t∆∞·ª£ng quan t√¢m
                    if class_name in self.target_classes:
                        confidence_threshold = self.get_confidence_threshold(class_name)
                        vietnamese_name, display_name = self.get_vietnamese_names(class_name)
                        
                        # T√≠nh to√°n th√¥ng tin bounding box
                        bbox_width = x2 - x1
                        bbox_height = y2 - y1
                        bbox_area = bbox_width * bbox_height
                        
                        # Ki·ªÉm tra ƒëa t·∫ßng th√¥ng minh
                        size_ok = self.is_reasonable_size(class_name, bbox_width, bbox_height, 
                                                        frame.shape[1], frame.shape[0])
                        position_ok = self.is_reasonable_position(class_name, x1, y1, x2, y2, 
                                                                frame.shape[1], frame.shape[0])
                        
                        # √Åp d·ª•ng context boost
                        context_boost = self.get_context_boost(class_name, all_detections)
                        adjusted_confidence = confidence + context_boost
                        
                        # Ki·ªÉm tra confidence v√† ƒë·ªô ·ªïn ƒë·ªãnh
                        if (adjusted_confidence > confidence_threshold and 
                            size_ok and position_ok and
                            self.is_stable_detection(class_name, adjusted_confidence, bbox_area)):
                            # Nh·∫≠n di·ªán ch√≠nh th·ª©c - m√†u xanh
                            current_objects[vietnamese_name] += 1
                            box_color = (0, 255, 0)  # Xanh l√°
                            text_bg_color = (0, 255, 0)
                            status = "‚úì"
                            
                            # Th∆∞·ªüng cho detection ƒë√∫ng
                            if self.false_positive_penalty.get(class_name, 0) > 0:
                                self.false_positive_penalty[class_name] *= 0.8
                                
                        elif confidence > 0.5 and size_ok:
                            # Nghi ng·ªù - m√†u v√†ng
                            box_color = (0, 255, 255)  # V√†ng
                            text_bg_color = (0, 255, 255)
                            
                            # Ph√¢n lo·∫°i l√Ω do nghi ng·ªù
                            if not position_ok:
                                status = "Pos?"
                            elif confidence <= confidence_threshold:
                                status = "Conf?"
                            else:
                                status = "Wait"
                        elif confidence > 0.3:
                            # Confidence th·∫•p - m√†u ƒë·ªè nh·∫°t
                            box_color = (128, 128, 255)  # ƒê·ªè nh·∫°t
                            text_bg_color = (128, 128, 255)
                            status = "Low"
                        else:
                            # B·ªè qua confidence qu√° th·∫•p
                            continue
                        
                        # V·∫Ω bounding box
                        cv2.rectangle(frame, (x1, y1), (x2, y2), box_color, 2)
                        
                        # V·∫Ω label v·ªõi th√¥ng tin chi ti·∫øt
                        label = f"{display_name}: {confidence:.2f} {status}"
                        label_size = cv2.getTextSize(label, cv2.FONT_HERSHEY_SIMPLEX, 0.4, 1)[0]
                        
                        # Background cho text
                        cv2.rectangle(frame, (x1, y1 - label_size[1] - 10), 
                                    (x1 + label_size[0] + 10, y1), text_bg_color, -1)
                        
                        # Text v·ªõi font an to√†n
                        cv2.putText(frame, label, (x1 + 2, y1 - 5), 
                                  cv2.FONT_HERSHEY_SIMPLEX, 0.4, (0, 0, 0), 1)
        
        return frame, current_objects
    
    def draw_counter_panel(self, frame, object_counts):
        """V·∫Ω b·∫£ng ƒë·∫øm ƒë·ªëi t∆∞·ª£ng"""
        panel_height = min(200, len(object_counts) * 25 + 50)
        panel = np.zeros((panel_height, 350, 3), dtype=np.uint8)
        
        # Header b·∫±ng ti·∫øng Vi·ªát (d√πng k√Ω t·ª± an to√†n)
        cv2.putText(panel, "BANG THONG KE", (10, 25), 
                   cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
        cv2.line(panel, (10, 35), (340, 35), (255, 255, 255), 1)
        
        # Danh s√°ch ƒë·ªëi t∆∞·ª£ng
        y_offset = 55
        total_objects = 0
        
        for obj_name, count in object_counts.items():
            if count > 0:
                # T√¨m t√™n hi·ªÉn th·ªã ng·∫Øn g·ªçn t·ª´ t√™n ƒë·∫ßy ƒë·ªß
                display_name = obj_name
                for eng_name, viet_name in self.vietnamese_names.items():
                    if viet_name == obj_name:
                        display_name = self.display_names.get(eng_name, obj_name)
                        break
                
                text = f"{display_name}: {count}"
                cv2.putText(panel, text, (10, y_offset), 
                           cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 255), 1)
                y_offset += 25
                total_objects += count
        
        # T·ªïng c·ªông
        cv2.line(panel, (10, y_offset), (340, y_offset), (255, 255, 255), 1)
        cv2.putText(panel, f"TONG CONG: {total_objects}", (10, y_offset + 20), 
                   cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)
        
        # Gh√©p panel v√†o frame
        frame_height, frame_width = frame.shape[:2]
        panel_resized = cv2.resize(panel, (min(350, frame_width//3), 
                                         min(panel_height, frame_height//2)))
        
        h, w = panel_resized.shape[:2]
        frame[10:10+h, frame_width-w-10:frame_width-10] = panel_resized
        
        return frame
    
    def log_detection(self, object_counts):
        """Ghi log v√†o file CSV"""
        if any(count > 0 for count in object_counts.values()):
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            for obj_name, count in object_counts.items():
                if count > 0:
                    self.log_data.append({
                        'timestamp': timestamp,
                        'object_name': obj_name,  # ƒê√£ l√† t√™n ti·∫øng Vi·ªát
                        'count': count
                    })
    
    def save_log_to_csv(self):
        """L∆∞u log v√†o file CSV"""
        if self.log_data:
            df = pd.DataFrame(self.log_data)
            # Thay ƒë·ªïi header th√†nh ti·∫øng Vi·ªát
            df.columns = ['Thoi_gian', 'Ten_do_vat', 'So_luong']
            filename = f"nhan_dien_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
            df.to_csv(filename, index=False, encoding='utf-8-sig')  # utf-8-sig ƒë·ªÉ hi·ªÉn th·ªã ƒë√∫ng ti·∫øng Vi·ªát
            print(f"üìä Log ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o {filename}")
    
    def run(self):
        """Ch·∫°y ·ª©ng d·ª•ng ch√≠nh"""
        if not self.load_model():
            return False
        
        if not self.init_camera():
            return False
        
        self.is_running = True
        last_log_time = time.time()
        
        print("\n" + "="*50)
        print("üéØ ·ª®NG D·ª§NG NH·∫¨N DI·ªÜN ƒê·ªí V·∫¨T")
        print("="*50)
        print("üìã H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:")
        print("   ‚Ä¢ 'q' ho·∫∑c 'ESC': Tho√°t ·ª©ng d·ª•ng")
        print("   ‚Ä¢ 's': Ch·ª•p ·∫£nh m√†n h√¨nh")
        print("   ‚Ä¢ 'r': Reset b·ªô ƒë·∫øm")
        print("   ‚Ä¢ 'l': L∆∞u log ngay l·∫≠p t·ª©c")
        print("="*50)
        
        try:
            while self.is_running:
                ret, frame = self.cap.read()
                if not ret:
                    print("‚ùå Kh√¥ng th·ªÉ ƒë·ªçc frame t·ª´ camera")
                    break
                
                # L·∫≠t frame theo chi·ªÅu ngang (mirror effect)
                frame = cv2.flip(frame, 1)
                
                # Th·ª±c hi·ªán detection
                results = self.model(frame, verbose=False)
                
                # L·∫•y danh s√°ch t·∫•t c·∫£ detections ƒë·ªÉ ph√¢n t√≠ch context
                all_detections = []
                for result in results:
                    if result.boxes is not None:
                        for box in result.boxes:
                            class_id = int(box.cls[0])
                            class_name = self.model.names[class_id]
                            confidence = box.conf[0]
                            if confidence > 0.3:  # Ch·ªâ x√©t c√°c detection c√≥ confidence t·ªëi thi·ªÉu
                                all_detections.append(class_name)
                
                # V·∫Ω predictions v·ªõi th√¥ng tin context
                frame, current_objects = self.draw_predictions(frame, results, all_detections)
                
                # C·∫≠p nh·∫≠t object counts (s·ª≠ d·ª•ng t√™n ti·∫øng Vi·ªát)
                for vietnamese_name in current_objects:
                    if vietnamese_name in current_objects:
                        self.object_counts[vietnamese_name] = max(self.object_counts[vietnamese_name], 
                                                                current_objects[vietnamese_name])
                
                # V·∫Ω b·∫£ng ƒë·∫øm
                frame = self.draw_counter_panel(frame, self.object_counts)
                
                # Th√¥ng tin FPS
                cv2.putText(frame, f"FPS: {int(self.cap.get(cv2.CAP_PROP_FPS))}", 
                           (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
                
                # Th√¥ng tin ch·∫ø ƒë·ªô l·ªçc v√† th·ªëng k√™
                cv2.putText(frame, "Xanh: OK | Vang: Nghi ngo | Do: Yeu", 
                           (10, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)
                
                # Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng ƒë·ªëi t∆∞·ª£ng ƒëang theo d√µi
                tracking_count = len([k for k, v in self.object_stability.items() if v > 5])
                cv2.putText(frame, f"Dang theo doi: {tracking_count} doi tuong", 
                           (10, 85), cv2.FONT_HERSHEY_SIMPLEX, 0.4, (200, 200, 200), 1)
                
                # Th√™m h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng (d√πng k√Ω t·ª± an to√†n)
                cv2.putText(frame, "Q: Thoat | S: Chup | R: Reset | L: Log | M: Mode", 
                           (10, frame.shape[0] - 30), cv2.FONT_HERSHEY_SIMPLEX, 0.4, (255, 255, 255), 1)
                cv2.putText(frame, f"Che do hien tai: {self.smart_mode}", 
                           (10, frame.shape[0] - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.4, (100, 255, 100), 1)
                
                # Hi·ªÉn th·ªã frame v·ªõi ti√™u ƒë·ªÅ ti·∫øng Vi·ªát
                cv2.imshow('Ung dung AI Nhan dien Do vat - Nhan Q de thoat', frame)
                
                # Log ƒë·ªãnh k·ª≥ (m·ªói 5 gi√¢y)
                if time.time() - last_log_time > 5:
                    self.log_detection(self.object_counts)
                    last_log_time = time.time()
                
                # X·ª≠ l√Ω ph√≠m
                key = cv2.waitKey(1) & 0xFF
                if key == ord('q') or key == 27:  # 'q' ho·∫∑c ESC
                    break
                elif key == ord('s'):  # Ch·ª•p ·∫£nh
                    screenshot_name = f"screenshot_{datetime.now().strftime('%Y%m%d_%H%M%S')}.jpg"
                    cv2.imwrite(screenshot_name, frame)
                    print(f"üì∏ ƒê√£ ch·ª•p ·∫£nh: {screenshot_name}")
                elif key == ord('r'):  # Reset counter
                    self.object_counts.clear()
                    self.detection_history.clear()  # X√≥a lu√¥n l·ªãch s·ª≠ nh·∫≠n di·ªán
                    print("üîÑ ƒê√£ reset b·ªô ƒë·∫øm v√† l·ªãch s·ª≠ nh·∫≠n di·ªán")
                elif key == ord('l'):  # L∆∞u log
                    self.save_log_to_csv()
                elif key == ord('m'):  # Chuy·ªÉn ƒë·ªïi ch·∫ø ƒë·ªô th√¥ng minh
                    modes = ["normal", "strict", "sensitive"]
                    current_idx = modes.index(self.smart_mode)
                    self.smart_mode = modes[(current_idx + 1) % len(modes)]
                    print(f"üß† Chuy·ªÉn sang ch·∫ø ƒë·ªô: {self.smart_mode}")
                    
                    # ƒêi·ªÅu ch·ªânh threshold theo ch·∫ø ƒë·ªô
                    if self.smart_mode == "strict":
                        # Ch·∫ø ƒë·ªô nghi√™m ng·∫∑t - √≠t false positive
                        for key in self.confidence_thresholds:
                            if key != 'default':
                                self.confidence_thresholds[key] *= 1.2
                    elif self.smart_mode == "sensitive":
                        # Ch·∫ø ƒë·ªô nh·∫°y c·∫£m - nhi·ªÅu detection h∆°n
                        for key in self.confidence_thresholds:
                            if key != 'default':
                                self.confidence_thresholds[key] *= 0.8
        
        except KeyboardInterrupt:
            print("\n‚ö†Ô∏è  Ng∆∞·ªùi d√πng d·ª´ng ·ª©ng d·ª•ng")
        
        finally:
            self.cleanup()
    
    def cleanup(self):
        """D·ªçn d·∫πp resources"""
        print("\nüßπ ƒêang d·ªçn d·∫πp...")
        
        if self.cap:
            self.cap.release()
        
        cv2.destroyAllWindows()
        
        # L∆∞u log cu·ªëi c√πng
        if self.log_data:
            self.save_log_to_csv()
        
        print("‚úÖ ƒê√£ tho√°t ·ª©ng d·ª•ng th√†nh c√¥ng!")

def main():
    """H√†m main"""
    app = ObjectDetectionApp()
    app.run()

if __name__ == "__main__":
    main()