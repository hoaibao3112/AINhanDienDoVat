#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script test YOLOv8 model
"""

import cv2
from ultralytics import YOLO
import time

def test_yolo_basic():
    """Test c∆° b·∫£n YOLOv8"""
    print("üß™ Testing YOLOv8 Model...")
    
    try:
        # T·∫£i model
        print("üì¶ Loading YOLOv8 model...")
        model = YOLO('yolov8n.pt')
        print("‚úÖ Model loaded successfully!")
        
        # Hi·ªÉn th·ªã th√¥ng tin model
        print(f"üìä Model info:")
        print(f"   - Classes: {len(model.names)}")
        print(f"   - Model type: YOLOv8")
        
        # Test v·ªõi camera
        print("üìπ Testing with camera...")
        cap = cv2.VideoCapture(0)
        
        if not cap.isOpened():
            print("‚ùå Cannot open camera")
            return False
        
        print("‚úÖ Camera opened successfully!")
        print("Press 'q' to quit test")
        
        frame_count = 0
        start_time = time.time()
        
        while True:
            ret, frame = cap.read()
            if not ret:
                break
            
            frame_count += 1
            
            # Ch·ªâ x·ª≠ l√Ω m·ªói 5 frame ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô
            if frame_count % 5 == 0:
                results = model(frame, verbose=False)
                
                # V·∫Ω k·∫øt qu·∫£
                for result in results:
                    boxes = result.boxes
                    if boxes is not None:
                        for box in boxes:
                            x1, y1, x2, y2 = map(int, box.xyxy[0])
                            confidence = box.conf[0]
                            class_id = int(box.cls[0])
                            class_name = model.names[class_id]
                            
                            if confidence > 0.5:
                                cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
                                label = f"{class_name}: {confidence:.2f}"
                                cv2.putText(frame, label, (x1, y1-10), 
                                          cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
            
            # Hi·ªÉn th·ªã FPS
            elapsed_time = time.time() - start_time
            fps = frame_count / elapsed_time if elapsed_time > 0 else 0
            cv2.putText(frame, f"FPS: {fps:.1f}", (10, 30), 
                       cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)
            
            cv2.imshow('YOLOv8 Test - Press Q to quit', frame)
            
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break
        
        cap.release()
        cv2.destroyAllWindows()
        
        print(f"üìä Test completed!")
        print(f"   - Total frames: {frame_count}")
        print(f"   - Average FPS: {fps:.1f}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Test failed: {e}")
        return False

def list_yolo_classes():
    """Li·ªát k√™ c√°c class m√† YOLOv8 c√≥ th·ªÉ nh·∫≠n di·ªán"""
    try:
        model = YOLO('yolov8n.pt')
        print("\nüìã YOLOv8 c√≥ th·ªÉ nh·∫≠n di·ªán c√°c ƒë·ªëi t∆∞·ª£ng sau:")
        print("="*60)
        
        for i, class_name in model.names.items():
            print(f"{i:2d}: {class_name}")
        
        print("="*60)
        print(f"T·ªïng c·ªông: {len(model.names)} classes")
        
        # C√°c class ph·ªï bi·∫øn
        common_objects = ['person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus', 
                         'train', 'truck', 'boat', 'traffic light', 'fire hydrant', 
                         'stop sign', 'parking meter', 'bench', 'bird', 'cat', 'dog', 
                         'horse', 'sheep', 'cow', 'elephant', 'bear', 'zebra', 'giraffe', 
                         'backpack', 'umbrella', 'handbag', 'tie', 'suitcase', 'frisbee', 
                         'skis', 'snowboard', 'sports ball', 'kite', 'baseball bat', 
                         'baseball glove', 'skateboard', 'surfboard', 'tennis racket', 
                         'bottle', 'wine glass', 'cup', 'fork', 'knife', 'spoon', 'bowl', 
                         'banana', 'apple', 'sandwich', 'orange', 'broccoli', 'carrot', 
                         'hot dog', 'pizza', 'donut', 'cake', 'chair', 'couch', 
                         'potted plant', 'bed', 'dining table', 'toilet', 'tv', 'laptop', 
                         'mouse', 'remote', 'keyboard', 'cell phone', 'microwave', 'oven', 
                         'toaster', 'sink', 'refrigerator', 'book', 'clock', 'vase', 
                         'scissors', 'teddy bear', 'hair drier', 'toothbrush']
        
        print(f"\nüéØ C√°c ƒë·ªëi t∆∞·ª£ng ph·ªï bi·∫øn trong nh√†:")
        for obj in common_objects:
            if obj in model.names.values():
                print(f"   ‚úÖ {obj}")
        
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")

def main():
    """H√†m main"""
    print("üöÄ YOLOv8 Test Suite")
    print("="*50)
    
    # Li·ªát k√™ classes
    list_yolo_classes()
    
    # Test model
    input("\nüëÜ Nh·∫•n Enter ƒë·ªÉ b·∫Øt ƒë·∫ßu test camera...")
    test_yolo_basic()

if __name__ == "__main__":
    main()